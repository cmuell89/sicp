#lang racket
;; Problem 2
(define square
  (lambda (x) (* x x)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))


(define root1
  (lambda (a b c)
    (+ (* -1 b) sqrt(-
               (square b)
               (* 4 a c)
               ))))

(define root2
  (lambda (a b c)
    (- (* -1 b) sqrt(-
               (square b)
               (* 4 a c)
               ))))

;; complete these procedures and show some test cases
(root1 1 1 1)